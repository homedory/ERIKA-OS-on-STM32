/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

/*
 * Author: 2013 Gianluca Franchino
 * 
 */

CPU mySystem {

	OS myOs {
		EE_OPT = "DEBUG";
		//EE_OPT = "VERBOSE";
		//EE_OPT = "__KEIL_4_54_OLDER__";
		//EE_OPT = "__KEIL_USE_AXF_EXT__";
		//LDFLAGS =" --specs=rdimon.specs -lrdimon";
		
		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c led.c sensor.c path.c can.c response.c stub.c swv.c usart.c path.c";
			//COMPILER_TYPE = KEIL; 
			COMPILER_TYPE = GNU;
			MULTI_STACK = FALSE;
		};
		EE_OPT = "__USE_SYSTICK__";

		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		EE_OPT = "__ADD_LIBS__";
		
		LIB = ENABLE { NAME = "ST_CMSIS"; };
		
		LIB = ENABLE { NAME = "STM32F4XX_SPD";
			STM32F4XX_SPD = ENABLE {
				USEGPIO = TRUE;
				USETIM = TRUE;
				USECAN = TRUE;
				USEMISC = TRUE;
				USEUSART = TRUE;
			};
		};
		
		LIB = ENABLE { NAME = "STM32F4_DISCOVERY"; };
		
		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = FP;

	};
	
	COUNTER additionalCounter {
		TICKSPERBASE = 1;
		MAXALLOWEDVALUE = 5000;    
	};
	
	ALARM AlarmSensor {
		COUNTER = additionalCounter;
		ACTION = ACTIVATETASK { 
			TASK = SensorDetect;
		};
	};
	
	COUNTER myCounter;

	ALARM AlarmToggle {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { 
			TASK = LightLED;
		};
	};
	
	TASK TaskIOToggle {
		PRIORITY = 0x02;   
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK FindShortestPath {
		PRIORITY = 0x02;   
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK LightLED {
		PRIORITY = 0x02;   
		AUTOSTART = TRUE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK SensorDetect {
		PRIORITY = 0x02;   
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 1;
	};
	
	ISR tim3_handler {
		CATEGORY = 2;
		ENTRY = "TIM3";
		PRIORITY = 2;
	};
	
	ISR usart2_handler {
		CATEGORY = 2;
		ENTRY = "USART2";
		PRIORITY = 2;
	};

};
